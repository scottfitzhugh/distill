use anyhow::{Context, Result};
use log::debug;
use reqwest::Client;
use serde::{Deserialize, Serialize};

/// OpenRouter API client
pub struct OpenRouterClient {
	client: Client,
	api_key: String,
}

#[derive(Serialize)]
struct ChatRequest {
	model: String,
	messages: Vec<Message>,
	max_tokens: u32,
	temperature: f32,
}

#[derive(Serialize)]
struct Message {
	role: String,
	content: String,
}

#[derive(Deserialize)]
struct ChatResponse {
	choices: Vec<Choice>,
}

#[derive(Deserialize)]
struct Choice {
	message: MessageResponse,
}

#[derive(Deserialize)]
struct MessageResponse {
	content: String,
}

impl OpenRouterClient {
	/// Create a new OpenRouter client
	pub fn new(api_key: &str) -> Self {
		Self {
			client: Client::new(),
			api_key: api_key.to_string(),
		}
	}

	/// Generate a commit message based on the git diff
	pub async fn generate_commit_message(&self, diff: &str) -> Result<String> {
		let prompt = self.create_commit_prompt(diff);
		
		let request = ChatRequest {
			model: "google/gemini-2.0-flash-exp:free".to_string(),
			messages: vec![
				Message {
					role: "system".to_string(),
					content: "You are an expert software developer who writes clear, concise git commit messages following conventional commit format. Analyze the provided git diff and generate a single line commit message that describes what was changed. The message should be in the format: 'type(scope): description' or 'type: description'. Use types like feat, fix, docs, style, refactor, test, etc. Keep it under 72 characters and be specific about what changed.".to_string(),
				},
				Message {
					role: "user".to_string(),
					content: prompt,
				},
			],
			max_tokens: 100,
			temperature: 0.3,
		};

		debug!("Sending request to OpenRouter API");

		let response = self.client
			.post("https://openrouter.ai/api/v1/chat/completions")
			.header("Authorization", format!("Bearer {}", self.api_key))
			.header("Content-Type", "application/json")
			.json(&request)
			.send()
			.await
			.context("Failed to send request to OpenRouter API")?;

		if !response.status().is_success() {
			let status = response.status();
			let error_text = response.text().await.unwrap_or_else(|_| "Unknown error".to_string());
			anyhow::bail!("OpenRouter API request failed with status {}: {}", status, error_text);
		}

		let chat_response: ChatResponse = response.json().await
			.context("Failed to parse response from OpenRouter API")?;

		let commit_message = chat_response
			.choices
			.first()
			.and_then(|choice| Some(choice.message.content.trim().to_string()))
			.context("No commit message generated by OpenRouter API")?;

		debug!("Generated commit message: {}", commit_message);

		// Clean up the commit message - remove quotes if present
		let cleaned_message = commit_message
			.trim_matches('"')
			.trim_matches('\'')
			.trim()
			.to_string();

		Ok(cleaned_message)
	}

	/// Create a prompt for generating commit messages
	fn create_commit_prompt(&self, diff: &str) -> String {
		// Truncate diff if it's too long to avoid token limits
		let max_diff_length = 4000;
		let truncated_diff = if diff.len() > max_diff_length {
			format!("{}...\n(diff truncated due to length)", &diff[..max_diff_length])
		} else {
			diff.to_string()
		};

		format!(
			"Generate a concise git commit message for the following diff:\n\n```diff\n{}\n```\n\nCommit message:",
			truncated_diff
		)
	}
} 